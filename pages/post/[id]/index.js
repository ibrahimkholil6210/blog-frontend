import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import * as Yup from "yup";
import { Formik, Form, Field } from "formik";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchPostAsync,
  createCommentAsync,
} from "../../../redux/slice/postSlice";
import { Button } from "../../../components/Button";
import mainStyles from "../../../styles/Main.module.css";
import styles from "../../../styles/Post.module.css";
import GetBack from "../../../components/GetBack";

const Post = () => {
  const router = useRouter();

  const post = useSelector((state) => state.post.singlePost);
  const loading = useSelector((state) => state.loading);
  const dispatch = useDispatch();

  useEffect(() => {
    if (!router.query.id) return;
    dispatch(fetchPostAsync(router.query.id));
  }, []);

  const handleSubmit = (values, ...rest) => {
    console.log(values);
    dispatch(
      createCommentAsync({
        postId: router.query.id,
        userName: values.userName,
        comment: values.comment,
        parentId: values.parentId,
      })
    );
    rest[0].resetForm();
  };

  console.log(post);

  return (
    <div className={mainStyles.container}>
      <Head>
        <title>{post?.title || "Post"} | Next Blog App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={mainStyles.main}>
        <div className={mainStyles.minWidth}>
          <GetBack />
          {loading ? (
            <h1 className={mainStyles.title}>Loading...</h1>
          ) : (
            <>
              <h1 className={mainStyles.title}>{post.title}</h1>
              <p>{post.content}</p>
            </>
          )}
          <CreateComment handleSubmit={handleSubmit} />
          <Comments comments={post.comments} handleSubmit={handleSubmit} />
        </div>
      </div>
    </div>
  );
};

export default Post;

const CreateComment = ({
  handleSubmit,
  formLabel = "Add a Comment",
  isReplyForm,
  parentId,
}) => {
  const validationSchemas = Yup.object().shape({
    userName: Yup.string().required("UserName is required"),
    comment: Yup.string().required("Comment is required"),
  });

  return (
    <div className={`${!isReplyForm && styles.commentContainer}`}>
      <div className={styles.titleCommentArea}>{formLabel}</div>
      <Formik
        initialValues={{
          userName: "",
          comment: "",
          ...(isReplyForm && { parentId }),
        }}
        validationSchema={validationSchemas}
        onSubmit={handleSubmit}
      >
        {({ touched, errors }) => {
          return (
            <Form>
              <div className={mainStyles.inputRow}>
                <div className={mainStyles.label}>Name</div>
                <Field name="userName" />
                {errors.userName && touched.userName ? (
                  <div className={mainStyles.errorMessage}>
                    {errors.userName}
                  </div>
                ) : null}
              </div>
              <div className={mainStyles.inputRow}>
                <div className={mainStyles.label}>Comment</div>
                <Field name="comment" as="textarea" />
                {errors.comment && touched.comment ? (
                  <div className={mainStyles.errorMessage}>
                    {errors.comment}
                  </div>
                ) : null}
              </div>
              <Button label="Submit" type="submit" />
            </Form>
          );
        }}
      </Formik>
    </div>
  );
};

const Comments = ({ comments, handleSubmit }) => {
  const [currentReplyComment, setCurrentReplyComment] = useState(null);

  return (
    <div className={styles.commentWrapper}>
      {comments?.map((singleComment, index) => {
        return (
          <div
            className={`${styles.commentContainer} ${styles.singleComment}`}
            key={singleComment?.id || index}
          >
            <div className={styles.commentAvatarConteiner}>
              <div className={styles.avatar}></div>
              <div className={styles.userInfoContainer}>
                <label>{singleComment.userName}</label>
                <div>June 25, 2021 AT 5:45 AM</div>
              </div>
            </div>
            <div className={styles.singleComment}>{singleComment.comment}</div>
            <div
              className={styles.replyBtn}
              onClick={() =>
                setCurrentReplyComment(
                  currentReplyComment === singleComment.id
                    ? null
                    : singleComment.id
                )
              }
            >
              {currentReplyComment === singleComment.id ? "Hide" : "Reply"}
            </div>
            {currentReplyComment === singleComment.id && (
              <CreateComment
                formLabel="Reply to this comment"
                isReplyForm
                parentId={singleComment.id}
                handleSubmit={handleSubmit}
              />
            )}
          </div>
        );
      })}
    </div>
  );
};